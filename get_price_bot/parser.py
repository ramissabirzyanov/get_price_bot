import logging
import re
import requests
import os
from lxml import html
from typing import Optional

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as ec
from selenium.webdriver.support.ui import WebDriverWait
from selenium.common.exceptions import TimeoutException, NoSuchElementException, WebDriverException
from selenium.webdriver.remote.webdriver import WebDriver
# from selenium.webdriver.chrome.service import Service
# from webdriver_manager.chrome import ChromeDriverManager


logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)
logger = logging.getLogger()


def clean_price(price: str) -> Optional[float]:
    """–û—á–∏—â–∞–µ—Ç —Ü–µ–Ω—É –æ—Ç –≤–∞–ª—é—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, –ø—Ä–æ–±–µ–ª–æ–≤, –∑–∞–ø—è—Ç—ã—Ö."""
    try:
        return float(re.sub(r"[^\d.]", "", price.replace(" ", "")))
    except ValueError:
        logger.error(f"Something wrong with price: {price}")
        return None


def get_selenium_driver() -> WebDriver:
    """–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É Selenium —á–µ—Ä–µ–∑ WebDriver."""

    options = webdriver.ChromeOptions()
    options.add_argument("--headless")
    options.add_argument("--disable-gpu")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_argument("--disable-dev-shm-usage")

    # –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ:
    selenium_url = os.getenv("SELENIUM_URL")

    if not selenium_url:
        raise ValueError(
            "SELENIUM_URL –Ω–µ –∑–∞–¥–∞–Ω. –î–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ —É–∫–∞–∂–∏—Ç–µ URL Selenium Hub.\n"
            "–ü—Ä–∏–º–µ—Ä: http://selenium:4444/wd/hub"
        )
    driver = webdriver.Remote(
        command_executor=selenium_url,
        options=options
    )
    # –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è driver:
    # driver = webdriver.Chrome(
    #     service=Service(ChromeDriverManager().install()),
    #     options=options
    # )
    return driver


def fetch_price_selenium(url: str, xpath: str) -> Optional[float]:
    """–ó–∞–±–∏—Ä–∞–µ—Ç —Ü–µ–Ω—É —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å–∞–π—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é Selenium"""
    try:
        driver = get_selenium_driver()
        driver.get(url)
        logger.info("üïí loading the element...")
        price_element = WebDriverWait(driver, 10).until(
            ec.presence_of_element_located((By.XPATH, xpath))
        )
        price_text = price_element.text.strip()

        if not price_text:
            logger.warning("The element is hided probably or none. Getting text by JS...")
            price_text = driver.execute_script(
                "return arguments[0].textContent;",
                price_element
            ).strip()
            return clean_price(price_text)
        return clean_price(price_text)
    
    except (TimeoutException, NoSuchElementException, WebDriverException) as e:
        logger.error(f"Selenium –æ—à–∏–±–∫–∞: {str(e)}")
        return None

    finally:
        driver.quit()


def fetch_price_static(url: str, xpath: str) -> Optional[float]:
    """–ó–∞–±–∏—Ä–∞–µ—Ç —Ü–µ–Ω—É —Å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∞–π—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º requests –∏ lxml"""
    try:
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        page_content = response.text
        tree = html.fromstring(page_content)
        prices = tree.xpath(xpath)
        if prices:
            price = prices[0].text_content().strip()
            return clean_price(price)
        return None

    except requests.RequestException as e:
        logger.error(f"HTTP request error: {e}")
        return None

    except Exception as e:
        logger.critical(f"Some mysterious error happened: {str(e)}")
        return None


def get_price(url: str, xpath: str) -> Optional[float]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞.
    –ö–∞–∫–æ–π –ø–∞—Ä—Å–µ—Ä –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∞–π—Ç–∞
    """
    price = fetch_price_static(url, xpath)

    if price is not None:
        return price

    logger.info("Trying Selenium...")
    price = fetch_price_selenium(url, xpath)
    return price
